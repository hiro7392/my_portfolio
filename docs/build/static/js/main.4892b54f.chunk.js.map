{"version":3,"sources":["components/Profile.js","components/Products.js","components/Rader.js","components/App.js","serviceWorker.js","index.js"],"names":["Profile","className","Products","classNmae","GradeRader","RadarChart","height","width","cx","cy","data","rank","value","fill","PolarGrid","PolarAngleAxis","dataKey","Radar","name","stroke","fillOpacity","Tooltip","library","add","fab","fas","App","props","state","openNumber","this","setState","url","history","push","home","about","lader","onClick","clickProfile","clickSkills","clickProducts","style","display","href","icon","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gSAqBeA,EAnBD,WAEV,OACE,yBAAKC,UAAU,WACf,wBAAIA,UAAU,aAAd,0DACA,wBAAIA,UAAU,WAAd,YAIA,6BACA,2ECsBSC,EA7BA,WAIX,OACE,yBAAKD,UAAU,YAEf,wBAAIA,UAAU,eAAd,sBACA,yBAAKE,UAAU,mBACX,mGACA,uDACA,yBAAKF,UAAU,WACjB,oDACA,gFAIA,4CACA,2FACA,kI,4CCiBOG,EApCE,WASb,OACA,kBAACC,EAAA,EAAD,CACAC,OAAQ,IACRC,MAAO,IACPC,GAAG,MACHC,GAAG,MACHC,KAdkB,CACd,CAAEC,KAAM,eAAMC,MAAO,KACrB,CAAED,KAAM,eAAMC,MAAO,IACrB,CAAED,KAAM,qBAAOC,MAAO,IACtB,CAAED,KAAM,KAAMC,MAAO,IACrB,CAAED,KAAM,KAAMC,MAAO,KAUzBC,KAAK,WAEL,kBAACC,EAAA,EAAD,MARA,oFASA,kBAACC,EAAA,EAAD,CACEC,QAAQ,SAEV,kBAACC,EAAA,EAAD,CACEC,KAAK,QACLF,QAAQ,QACRG,OAAO,UAEPN,KAAK,UACLO,YAAa,IAEf,kBAACC,EAAA,EAAD,MApBA,yH,yCCQJC,EAAQC,IAAIC,IAAIC,K,IAuEDC,E,kDAnEX,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAGDC,MAAM,CAACC,WAAW,GAJN,E,2DAQfC,KAAKC,SAAS,CAACF,WAAW,M,oCAG1BC,KAAKC,SAAS,CAACF,WAAW,M,sCAG1BC,KAAKC,SAAS,CAACF,WAAW,M,iCAGjBG,GACTF,KAAKH,MAAMM,QAAQC,KAAKF,K,+BAM3B,IAAD,OACMG,EAAK,kBAAC,EAAD,MAELC,EAAM,kBAAC,EAAD,MACNC,EAAM,kBAAC,EAAD,MAGV,OAEA,yBAAKpC,UAAU,QACb,yBAAKA,UAAU,aACb,4BAAQqC,QAAS,WAAK,EAAKC,gBAAiBtC,UAAU,aAAtD,QACA,4BAAQqC,QAAS,WAAK,EAAKE,eAAiBvC,UAAU,cAAtD,QACA,4BAAQqC,QAAS,WAAK,EAAKG,iBAAkBxC,UAAU,gBAAvD,UAEF,yBAAKA,UAAU,YAKb,yBAAKyC,MAAO,CAACC,QAAgC,IAAxBb,KAAKF,MAAMC,WAAiB,OAAS,KAAOM,GAGjE,yBAAKO,MAAO,CAACC,QAAgC,IAAxBb,KAAKF,MAAMC,WAAiB,OAAS,KAAOQ,GAChED,GAEH,kBAAC,IAAD,KACI,yBAAKnC,UAAU,SACf,uBAAGA,UAAU,mBAAmB2C,KAAK,+BAA8B,kBAAC,IAAD,CAAiBC,KAAM,CAAC,MAAM,aACjG,uBAAG5C,UAAU,oBAAoB2C,KAAK,iCAAgC,kBAAC,IAAD,CAAiBC,KAAM,CAAC,MAAM,cACpG,uBAAG5C,UAAU,oBAAoB2C,KAAK,qCAAoC,kBAAC,IAAD,CAAiBC,KAAM,CAAC,MAAM,0B,GAvDlGC,IAAMC,WCdJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4892b54f.chunk.js","sourcesContent":["import React from 'react';\n//import \"status1.png\";\nconst Profile=()=>{\n\n    return (\n      <div className=\"Profile\">\n      <h1 className=\"home_name\">千里の道も一歩から</h1>\n      <h2 className=\"my_name\">Takenoko</h2>\n      \n      \n\n      <h3></h3>\n      <p>週間記録アプリ</p>\n      \n      \n    </div>\n\n    );\n\n}\n\nexport default Profile;\n","\nimport React from 'react';\n\n\n//const Products:React.FC=()=>\nconst Products=()=>{\n\n\n\n    return (\n      <div className=\"Products\">\n\n      <h1 className=\"about_title\">作成者</h1>\n      <div classNmae=\"profile_content\">\n          <p>広島大学 工学部二類　4年</p>\n          <p>川原大宙</p>\n          <div className=\"English\">\n        <h3>Hiroshima University</h3>\n        <p>Electrical Engineering and System Control Course</p>\n        </div>\n        \n        \n        <h4>趣味</h4>\n        <p>・競技プログラミング</p>\n        <p>・好きなバンドのライブに行くこと</p>\n        </div>\n\n      </div>\n\n    );\n  }\n\n\n\nexport default Products;\n","    //表示させたいデータ群\n     //表示させたいデータ群\nimport {PolarGrid,Tooltip,RadarChart,PolarAngleAxis,Radar} from 'recharts'\nimport React from 'react';\n\nconst GradeRader=()=>{\n    const dataRadar = [\n        { rank: '知識', value: 120 },\n        { rank: '経験', value: 85 },\n        { rank: '集中力', value: 65 },\n        { rank: 'HP', value: 35 },\n        { rank: 'MP', value: 35 },\n        ];\n    \n    return(\n    <RadarChart // レーダーチャートのサイズや位置、データを指定\n    height={400} //レーダーチャートの全体の高さを指定\n    width={500} //レーダーチャートの全体の幅を指定\n    cx=\"50%\" //要素の左を基準に全体の50%移動\n    cy=\"50%\" //要素の上を基準に全体の50%移動\n    data={dataRadar} //ここにArray型のデータを指定\n    fill=\"#f0f8ff\"\n    >\n    <PolarGrid /> //レーダーのグリッド線を表示\n    <PolarAngleAxis\n      dataKey=\"rank\" //Array型のデータの、数値を表示したい値のキーを指定\n    />\n    <Radar //レーダーの色や各パラメーターのタイトルを指定\n      name=\"score\"  //hoverした時に表示される名前を指定\n      dataKey=\"value\" //Array型のデータのパラメータータイトルを指定\n      stroke=\"#8884d8\"  //レーダーの線の色を指定\n      //fill=\"#8884d8\" //レーダーの中身の色を指定\n      fill=\"#008000\" //レーダーの中身の色を指定\n      fillOpacity={1.0} //レーダーの中身の色の薄さを指定\n    />\n    <Tooltip /> //hoverすると各パラメーターの値が表示される\n    </RadarChart>\n\n    );\n}\n\nexport default GradeRader;","\n\nimport React from 'react';\n\n//import { withRouter } from 'react-router';\n//import { Link } from \"react-router-dom\";\nimport Contentbox from './Contentbox';\n//import {View } from 'react-native';\n//import { Ionicons, FontAwesome } from \"@expo/vector-icons\";\n//import Icon from 'react-native-vector-icons/FontAwesome';\nimport Profile from './Profile';\nimport Skills from './Skills';\nimport Products from './Products';\n//import InputForm from './Firebase';\nimport GradeRader from './Rader';\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport { fas } from \"@fortawesome/free-solid-svg-icons\"; \nimport { library } from '@fortawesome/fontawesome-svg-core';\n\n\nlibrary.add(fab,fas);\n\n\nclass App extends React.Component{\n    constructor(props) {\n      super(props);\n      \n      // stateを定義してください\n      this.state={openNumber:0};\n\n    }\n      clickProfile(){\n        this.setState({openNumber:0});\n      }\n      clickSkills(){\n        this.setState({openNumber:1});\n      }\n      clickProducts(){\n        this.setState({openNumber:2});\n      }\n\n      moveToLink(url){\n        this.props.history.push(url);\n      }\n\n      \n    \n    render()\n    {\n      let home=<Profile/>;\n      let skill=<Skills/>;\n      let about=<Products/>;\n      let lader=<GradeRader/>;\n      \n\n      return (\n        \n      <div className=\"main\">\n        <div className=\"headlinks\">\n          <button onClick={()=>{this.clickProfile()}} className=\"btn about\">Home</button>\n          <button onClick={()=>{this.clickSkills()}}  className=\"btn Skills\">List</button>\n          <button onClick={()=>{this.clickProducts()}} className=\"btn products\">Chart</button>\n        </div>\n        <div className=\"contents\">\n\n          \n          \n          \n          <div style={{display:this.state.openNumber!==0 ? 'none' : '' }}>{home}</div>\n          \n          \n          <div style={{display:this.state.openNumber!==0 ? 'none' : '' }}>{lader}</div>\n          {about}\n        </div>\n        <BrowserRouter>\n            <div className=\"links\">            \n            <a className=\"btn github links\" href=\"https://github.com/fish0504\"><FontAwesomeIcon icon={['fab','github']}/></a>\n            <a className=\"btn twitter links\" href=\"https://twitter.com/fish0504_\"><FontAwesomeIcon icon={['fab','twitter']}/></a>\n            <a className=\"btn AtCoder links\" href=\"https://atcoder.jp/users/fish0504\"><FontAwesomeIcon icon={['fas','chess-knight']}/></a>\n            </div>\n        </BrowserRouter>\n      </div>\n      \n    \n  \n    );\n  }\n\n}\n//\n//<Link to=\"https://twitter.com/fish0504_\"><button className=\"btn twitter links\">Twitter</button></Link>\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './stylesheet.css'\nimport App from './components/App';\n\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}